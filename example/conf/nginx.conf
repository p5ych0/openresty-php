
# User is dynamically set by entrypoint script based on PUID/PGID
user  www-data;
worker_processes  auto;

# Environment variables support (must be at main context level)
env ALLOWED_DOMAINS;
env SSL_EMAIL;
env SSL_STAGING;

# Use OpenResty's standard log directory
error_log  /usr/local/openresty/nginx/logs/error-main.log warn;
pid        /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] ($host) "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Use multiple resolvers for better reliability
    resolver 8.8.8.8 1.1.1.1 ipv6=off;

    # The "auto_ssl" shared dict should be defined with enough storage space to
    # hold your certificate data. 1MB of storage holds certificates for
    # approximately 100 separate domains.
    lua_shared_dict auto_ssl 1m;
    lua_shared_dict auto_ssl_settings 64k;

    # Initial setup tasks.
    init_by_lua_block {
        auto_ssl = (require "resty.auto-ssl").new()

        -- Get allowed domains from environment variable
        local allowed_domains = os.getenv("ALLOWED_DOMAINS")

        auto_ssl:set("allow_domain", function(domain)
            -- If no environment variable set, allow localhost for development
            if not allowed_domains or allowed_domains == "" then
                return ngx.re.match(domain, "^(localhost|127\\.0\\.0\\.1|.*\\.local)$", "ijo")
            end

            -- Split allowed domains by comma and check each pattern
            for pattern in string.gmatch(allowed_domains, "([^,]+)") do
                pattern = pattern:gsub("%s+", "") -- Remove whitespace
                -- Escape dots and convert wildcards
                pattern = pattern:gsub("%.", "\\.")
                pattern = pattern:gsub("%*", ".*")
                pattern = "^" .. pattern .. "$"

                if ngx.re.match(domain, pattern, "ijo") then
                    return true
                end
            end

            return false
        end)

        auto_ssl:set("dir", "/etc/resty-auto-ssl")

        -- Set email for Let's Encrypt registration from environment
        local ssl_email = os.getenv("SSL_EMAIL")
        if ssl_email and ssl_email ~= "" then
            auto_ssl:set("ca", "https://acme-v02.api.letsencrypt.org/directory")
            auto_ssl:set("email", ssl_email)
        end

        -- Enable staging environment if requested
        local ssl_staging = os.getenv("SSL_STAGING")
        if ssl_staging == "true" or ssl_staging == "1" then
            auto_ssl:set("ca", "https://acme-staging-v02.api.letsencrypt.org/directory")
            ngx.log(ngx.WARN, "SSL: Using Let's Encrypt staging environment")
        end

        auto_ssl:init()
    }

    init_worker_by_lua_block {
        auto_ssl:init_worker()
    }

    # Use OpenResty's standard log directory
    access_log /usr/local/openresty/nginx/logs/access-main.log main;

    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;

    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    # Gzip compression
    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    include /etc/nginx/server.conf;
}
